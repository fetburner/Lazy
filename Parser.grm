


%%
(* Declarations for ML-Yacc *)

%name Lazy
%pos unit
%eop SEMICOLON
%start EXP

(* Terminal symbols *)
%term IDENT of string (* value identifier *)
    | BOOL of bool
    | DIGIT of int
    | CASE (* case *)
    | ELSE (* else *)
    | END (* end *)
    | FN (* fn *)
    | IF (* if *)
    | IN (* in *)
    | LET (* let *)
    | OF (* of *)
    | REC (* rec *)
    | THEN (* then *)
    | VAL (* val *)
    | EQUAL (* = *)
    | COMMA (* , *)
    | LPAREN (* ( *)
    | RPAREN (* ) *)
    | FATARROW (* => *)
    | SEMICOLON (* ; *)
    | PLUS (* + *)
    | MINUS (* - *)
    | TIMES (* * *)
    | LE (* <= *)
    | LBRACKET (* [ *)
    | RBRACKET (* * *)
    | CONS (* :: *)
    | BAR (* | *)
    | AND (* and *)

(* Nonterminal symbols *)
%nonterm ATEXP of Syntax.exp
       | EXP of Syntax.exp
       | APPEXP of Syntax.exp
       | PRODEXP of Syntax.exp
       | SUMEXP of Syntax.exp
       | CONSEXP of Syntax.exp
       | CMPEXP of Syntax.exp
       | ATDEC of Syntax.dec
       | VALBIND of (string * Syntax.exp) list
       | DEC of Syntax.dec list
       | TUPLE_BODY of Syntax.exp list
       | PATROW of (Syntax.pat * Syntax.exp) list
       | ATPAT of Syntax.pat
       | PAT of Syntax.pat
       | PTUPLE_BODY of Syntax.pat list

%%

(* Production rules *)
ATEXP : BOOL
          (Syntax.BOOL BOOL)
      | DIGIT
          (Syntax.INT DIGIT)
      | LPAREN RPAREN
          (Syntax.TUPLE [])
      | LBRACKET RBRACKET
          (Syntax.NIL)
      | LPAREN TUPLE_BODY RPAREN
          (Syntax.TUPLE TUPLE_BODY)
      | IDENT
          (Syntax.VAR IDENT)
      | LET DEC IN EXP END
          (Syntax.LET (DEC, EXP))
      | LPAREN EXP RPAREN
          (EXP)

APPEXP : ATEXP
           (ATEXP)
       | APPEXP ATEXP
           (Syntax.APP (APPEXP, ATEXP))

PRODEXP : APPEXP
            (APPEXP)
        | PRODEXP TIMES APPEXP
            (Syntax.TIMES (PRODEXP, APPEXP))

SUMEXP : PRODEXP
           (PRODEXP)
       | SUMEXP PLUS PRODEXP
           (Syntax.PLUS (SUMEXP, PRODEXP))
       | SUMEXP MINUS PRODEXP
           (Syntax.MINUS (SUMEXP, PRODEXP))

CONSEXP : SUMEXP
            (SUMEXP)
        | SUMEXP CONS CONSEXP
            (Syntax.CONS (SUMEXP, CONSEXP))

CMPEXP : CONSEXP
           (CONSEXP)
       | CONSEXP LE CONSEXP
           (Syntax.LE (CONSEXP1, CONSEXP2))

EXP : CMPEXP
        (CMPEXP)
    | FN IDENT FATARROW EXP
        (Syntax.ABS (IDENT, EXP))
    | IF EXP THEN EXP ELSE EXP
        (Syntax.CASE
	  (EXP1,
	    [(Syntax.PBOOL true, EXP2),
	     (Syntax.PBOOL false, EXP3)]))
    | CASE EXP OF PATROW
        (Syntax.CASE (EXP, PATROW))

ATDEC : VAL IDENT EQUAL EXP
          (Syntax.VAL (IDENT, EXP))
      | VAL REC VALBIND
          (Syntax.VALREC (VALBIND))

VALBIND : IDENT EQUAL EXP
            ([(IDENT, EXP)])
        | IDENT EQUAL EXP AND VALBIND
            ((IDENT, EXP) :: VALBIND)

DEC : ATDEC
        ([ATDEC])
    | ATDEC SEMICOLON DEC
        (ATDEC :: DEC)
    | ATDEC DEC
        (ATDEC :: DEC)

TUPLE_BODY : EXP COMMA EXP
               ([EXP1, EXP2])
           | EXP COMMA TUPLE_BODY
               (EXP :: TUPLE_BODY)

PATROW : PAT FATARROW EXP
           ([(PAT, EXP)])
       | PAT FATARROW EXP BAR PATROW
           ((PAT, EXP) :: PATROW)

ATPAT : BOOL
	  (Syntax.PBOOL BOOL)
      | DIGIT
	  (Syntax.PINT DIGIT)
      | IDENT
	  (Syntax.PVAR IDENT)
      | LBRACKET RBRACKET
	  (Syntax.PNIL)
      | LPAREN PTUPLE_BODY RPAREN
	  (Syntax.PTUPLE PTUPLE_BODY)
      | LPAREN PAT RPAREN
	  (PAT)

PAT : ATPAT
        (ATPAT)
    | ATPAT CONS PAT
        (Syntax.PCONS (ATPAT, PAT))

PTUPLE_BODY : PAT COMMA PAT
                ([PAT1, PAT2])
            | PAT COMMA PTUPLE_BODY
                (PAT :: PTUPLE_BODY)

